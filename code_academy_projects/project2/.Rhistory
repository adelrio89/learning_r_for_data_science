households.cleaning(households)
# Keep only columns listed
keep <- c("Id","hacdor", "rooms", "hacapo","v2a1","v14a","refrig","v18q","v18q1","escolari","hhsize","edjefe","edjefa","parentesco1","Target")
households <- households[,keep]
# load the library to create the model
library(rpart)
# Keep only columns listed
keep <- c("hacdor", "rooms", "hacapo","v2a1","v14a","refrig","v18q","v18q1","escolari","hhsize","edjefe","edjefa","parentesco1","Target")
households <- households[,keep]
# Take only households' heads
households <- households[households$parentesco1 == 1,]
dim(households)
# randomly sample 70% of the rows in the dataset to train the model
train.index = sample(1:nrow(households),0.7*nrow(households))
# use row index to create the train dataset
households.train <- households[train.index,]
dim(households.train)
# select the remaining 30% of the rows as test dataset
households.test <- households[-train.index,]
dim(households.test)
tree.params <- rpart.control(minsplit=5,
minbucket=5, maxdepth=30, cp=0.001)
households.tree2 <- rpart(Target ~., data=households.train,
control=tree.params, parms=list(split="gini"))
# Visualize the model
plot(households.tree2)
title(main = "Decision Tree Model of Costa Rican Households Data")
text(households.tree2, use.n = TRUE)
# Predict costa rican households level of poverty, given test data
# using decision model
households.predictions2 <- predict(households.tree2, households.test, type="class")
str(households.predictions2)
# Predict costa rican households level of poverty, given test data
# using decision model
households.predictions2 <- predict(households.tree2, households.test, type="class")
## Read the costa rican households dataser
households <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/train 2.csv")
## dimesnion of the dataset
dim(households)
## the first few rows
head(households)
## struture of the dataset
str(households)
households.cleaning <- function(households)
{
## Cast some columns to categorical
columns <- c("Id","hacdor", "rooms", "hacapo","v14a","refrig","v18q","v18q1","Target")
households[,columns] <- lapply(households[,columns], as.factor)
#households <- lapply(households[sapply(households,is.integer)], as.factor)
households$rez_esc <- as.numeric(households$rez_esc)
##Change column names
##colnames(households.heads)[colnames(households.heads)=='v2a1'] <- "mrpayment"
##levels(households.heads$rooms)[1] <- c("1")
#Count nan in dataframe
nan.summary <- sapply(households, function(x) sum(is.na(x)))
nan.summary[nan.summary>0]
#v2a1 -> 6860
#v18q1 -> 7342
#rez_esc -> 7928
#meaneduc -> 5
#SQBmeaned -> 5
# Replace nan values
households[is.na(households$v2a1),"v2a1"] <- 0
households$v18q1 <- as.numeric(as.character(households$v18q1))
households[is.na(households$v18q1),"v18q1"] <- 0
households$v18q1 <- as.factor(households$v18q1)
households[is.na(households$rez_esc),"rez_esc"] <- 0
levels(households$v18q1)
summary(households$rez_esc)
# Calculate mean group by household (idhogar) and replace rez_esc value with
# the calculated mean
library(dplyr)
households <- households %>% group_by(idhogar) %>% mutate(rez_esc=mean(rez_esc,na.rm = TRUE))
dim(households)
# Remove rows with nan values in meaneduc and SQBmeaned columns
households <- households[!is.na(households$meaneduc),]
households <- households[!is.na(households$SQBmeaned),]
dim(households)
# Remove columns that will not be included in model
# drop <- c("SQBescolari","SQBage","SQBhogar_total","SQBedjefe","SQBhogar_nin","SQBovercrowding","SQBdependency","SQBmeaned","agesq")
# households <- households[,!names(households) %in% drop]
}
households.cleaning(households)
households.cleaning <- function(households)
{
## Cast some columns to categorical
columns <- c("Id","hacdor", "rooms", "hacapo","v14a","refrig","v18q","v18q1","Target")
households[,columns] <- lapply(households[,columns], as.factor)
#households <- lapply(households[sapply(households,is.integer)], as.factor)
households$rez_esc <- as.numeric(households$rez_esc)
##Change column names
##colnames(households.heads)[colnames(households.heads)=='v2a1'] <- "mrpayment"
##levels(households.heads$rooms)[1] <- c("1")
#Count nan in dataframe
nan.summary <- sapply(households, function(x) sum(is.na(x)))
nan.summary[nan.summary>0]
#v2a1 -> 6860
#v18q1 -> 7342
#rez_esc -> 7928
#meaneduc -> 5
#SQBmeaned -> 5
# Replace nan values
households[is.na(households$v2a1),"v2a1"] <- 0
households$v18q1 <- as.numeric(as.character(households$v18q1))
households[is.na(households$v18q1),"v18q1"] <- 0
households$v18q1 <- as.factor(households$v18q1)
households[is.na(households$rez_esc),"rez_esc"] <- 0
levels(households$v18q1)
summary(households$rez_esc)
# Calculate mean group by household (idhogar) and replace rez_esc value with
# the calculated mean
library(dplyr)
households <- households %>% group_by(idhogar) %>% mutate(rez_esc=mean(rez_esc,na.rm = TRUE))
dim(households)
# Remove rows with nan values in meaneduc and SQBmeaned columns
households <- households[!is.na(households$meaneduc),]
households <- households[!is.na(households$SQBmeaned),]
dim(households)
# Remove columns that will not be included in model
# drop <- c("SQBescolari","SQBage","SQBhogar_total","SQBedjefe","SQBhogar_nin","SQBovercrowding","SQBdependency","SQBmeaned","agesq")
# households <- households[,!names(households) %in% drop]
return households
}
source('~/datascience/kaggle/costa-rican-household-poverty-prediction/costa rican households analysis.R')
households.cleaning <- function(households)
{
## Cast some columns to categorical
columns <- c("Id","hacdor", "rooms", "hacapo","v14a","refrig","v18q","v18q1","Target")
households[,columns] <- lapply(households[,columns], as.factor)
#households <- lapply(households[sapply(households,is.integer)], as.factor)
households$rez_esc <- as.numeric(households$rez_esc)
##Change column names
##colnames(households.heads)[colnames(households.heads)=='v2a1'] <- "mrpayment"
##levels(households.heads$rooms)[1] <- c("1")
#Count nan in dataframe
nan.summary <- sapply(households, function(x) sum(is.na(x)))
nan.summary[nan.summary>0]
#v2a1 -> 6860
#v18q1 -> 7342
#rez_esc -> 7928
#meaneduc -> 5
#SQBmeaned -> 5
# Replace nan values
households[is.na(households$v2a1),"v2a1"] <- 0
households$v18q1 <- as.numeric(as.character(households$v18q1))
households[is.na(households$v18q1),"v18q1"] <- 0
households$v18q1 <- as.factor(households$v18q1)
households[is.na(households$rez_esc),"rez_esc"] <- 0
levels(households$v18q1)
summary(households$rez_esc)
# Calculate mean group by household (idhogar) and replace rez_esc value with
# the calculated mean
library(dplyr)
households <- households %>% group_by(idhogar) %>% mutate(rez_esc=mean(rez_esc,na.rm = TRUE))
dim(households)
# Remove rows with nan values in meaneduc and SQBmeaned columns
households <- households[!is.na(households$meaneduc),]
households <- households[!is.na(households$SQBmeaned),]
dim(households)
# Remove columns that will not be included in model
# drop <- c("SQBescolari","SQBage","SQBhogar_total","SQBedjefe","SQBhogar_nin","SQBovercrowding","SQBdependency","SQBmeaned","agesq")
# households <- households[,!names(households) %in% drop]
return(households)
}
## Read the costa rican households dataser
households <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/train 2.csv")
households.cleaning <- function(households)
{
## Cast some columns to categorical
columns <- c("Id","hacdor", "rooms", "hacapo","v14a","refrig","v18q","v18q1","Target")
households[,columns] <- lapply(households[,columns], as.factor)
#households <- lapply(households[sapply(households,is.integer)], as.factor)
households$rez_esc <- as.numeric(households$rez_esc)
##Change column names
##colnames(households.heads)[colnames(households.heads)=='v2a1'] <- "mrpayment"
##levels(households.heads$rooms)[1] <- c("1")
#Count nan in dataframe
nan.summary <- sapply(households, function(x) sum(is.na(x)))
nan.summary[nan.summary>0]
#v2a1 -> 6860
#v18q1 -> 7342
#rez_esc -> 7928
#meaneduc -> 5
#SQBmeaned -> 5
# Replace nan values
households[is.na(households$v2a1),"v2a1"] <- 0
households$v18q1 <- as.numeric(as.character(households$v18q1))
households[is.na(households$v18q1),"v18q1"] <- 0
households$v18q1 <- as.factor(households$v18q1)
households[is.na(households$rez_esc),"rez_esc"] <- 0
levels(households$v18q1)
summary(households$rez_esc)
# Calculate mean group by household (idhogar) and replace rez_esc value with
# the calculated mean
library(dplyr)
households <- households %>% group_by(idhogar) %>% mutate(rez_esc=mean(rez_esc,na.rm = TRUE))
dim(households)
# Remove rows with nan values in meaneduc and SQBmeaned columns
households <- households[!is.na(households$meaneduc),]
households <- households[!is.na(households$SQBmeaned),]
dim(households)
# Remove columns that will not be included in model
# drop <- c("SQBescolari","SQBage","SQBhogar_total","SQBedjefe","SQBhogar_nin","SQBovercrowding","SQBdependency","SQBmeaned","agesq")
# households <- households[,!names(households) %in% drop]
return(households)
}
households <- households.cleaning(households)
# Keep only columns listed
keep <- c("Id","hacdor", "rooms", "hacapo","v2a1","v14a","refrig","v18q","v18q1","escolari","hhsize","edjefe","edjefa","parentesco1","Target")
households <- households[,keep]
# load the library to create the model
library(rpart)
# Keep only columns listed
keep <- c("hacdor", "rooms", "hacapo","v2a1","v14a","refrig","v18q","v18q1","escolari","hhsize","edjefe","edjefa","parentesco1","Target")
households <- households[,keep]
# Take only households' heads
households <- households[households$parentesco1 == 1,]
dim(households)
# randomly sample 70% of the rows in the dataset to train the model
train.index = sample(1:nrow(households),0.7*nrow(households))
# use row index to create the train dataset
households.train <- households[train.index,]
dim(households.train)
# select the remaining 30% of the rows as test dataset
households.test <- households[-train.index,]
dim(households.test)
tree.params <- rpart.control(minsplit=5,
minbucket=5, maxdepth=30, cp=0.001)
households.tree2 <- rpart(Target ~., data=households.train,
control=tree.params, parms=list(split="gini"))
# Predict costa rican households level of poverty, given test data
# using decision model
households.predictions2 <- predict(households.tree2, households.test, type="class")
str(households.predictions2)
# Comparison table
households.comparison <- households.test
households.comparison$Predictions <- households.predictions2
households.comparison[ , c("Target", "Predictions")]
# Confusion matrix
households.confusion <- table(households.predictions2,households.test$Target)
households.confusion
# Evaluate test kaggle dataset
house.kaggle.test <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/test.csv")
house.kaggle.test <- households.cleaning(house.kaggle.test)
source('~/datascience/kaggle/costa-rican-household-poverty-prediction/costa rican households analysis.R')
source('~/datascience/kaggle/costa-rican-household-poverty-prediction/costa rican households analysis.R')
source('~/datascience/kaggle/costa-rican-household-poverty-prediction/costa rican households analysis.R')
source('~/datascience/kaggle/costa-rican-household-poverty-prediction/costa rican households analysis.R')
## Read the costa rican households dataser
households <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/train 2.csv")
households.cleaning <- function(households, incclass)
{
## Cast some columns to categorical
ifelse(incclass == TRUE,
columns <- c("Id","hacdor", "rooms", "hacapo","v14a","refrig","v18q","v18q1","Target"),
columns <- c("Id","hacdor", "rooms", "hacapo","v14a","refrig","v18q","v18q1"))
households[,columns] <- lapply(households[,columns], as.factor)
#households <- lapply(households[sapply(households,is.integer)], as.factor)
households$rez_esc <- as.numeric(households$rez_esc)
##Change column names
##colnames(households.heads)[colnames(households.heads)=='v2a1'] <- "mrpayment"
##levels(households.heads$rooms)[1] <- c("1")
#Count nan in dataframe
nan.summary <- sapply(households, function(x) sum(is.na(x)))
nan.summary[nan.summary>0]
#v2a1 -> 6860
#v18q1 -> 7342
#rez_esc -> 7928
#meaneduc -> 5
#SQBmeaned -> 5
# Replace nan values
households[is.na(households$v2a1),"v2a1"] <- 0
households$v18q1 <- as.numeric(as.character(households$v18q1))
households[is.na(households$v18q1),"v18q1"] <- 0
households$v18q1 <- as.factor(households$v18q1)
households[is.na(households$rez_esc),"rez_esc"] <- 0
levels(households$v18q1)
summary(households$rez_esc)
# Calculate mean group by household (idhogar) and replace rez_esc value with
# the calculated mean
library(dplyr)
households <- households %>% group_by(idhogar) %>% mutate(rez_esc=mean(rez_esc,na.rm = TRUE))
dim(households)
# Remove rows with nan values in meaneduc and SQBmeaned columns
households <- households[!is.na(households$meaneduc),]
households <- households[!is.na(households$SQBmeaned),]
dim(households)
# Remove columns that will not be included in model
# drop <- c("SQBescolari","SQBage","SQBhogar_total","SQBedjefe","SQBhogar_nin","SQBovercrowding","SQBdependency","SQBmeaned","agesq")
# households <- households[,!names(households) %in% drop]
return(households)
}
households <- households.cleaning(households,TRUE)
# Keep only columns listed
keep <- c("Id","hacdor", "rooms", "hacapo","v2a1","v14a","refrig","v18q","v18q1","escolari","hhsize","edjefe","edjefa","parentesco1","Target")
households <- households[,keep]
# load the library to create the model
library(rpart)
# Keep only columns listed
keep <- c("hacdor", "rooms", "hacapo","v2a1","v14a","refrig","v18q","v18q1","escolari","hhsize","edjefe","edjefa","parentesco1","Target")
households <- households[,keep]
# Take only households' heads
households <- households[households$parentesco1 == 1,]
dim(households)
# randomly sample 70% of the rows in the dataset to train the model
train.index = sample(1:nrow(households),0.7*nrow(households))
# use row index to create the train dataset
households.train <- households[train.index,]
dim(households.train)
# select the remaining 30% of the rows as test dataset
households.test <- households[-train.index,]
dim(households.test)
tree.params <- rpart.control(minsplit=5,
minbucket=5, maxdepth=30, cp=0.001)
households.tree2 <- rpart(Target ~., data=households.train,
control=tree.params, parms=list(split="gini"))
# Visualize the model
plot(households.tree2)
title(main = "Decision Tree Model of Costa Rican Households Data")
text(households.tree2, use.n = TRUE)
# Predict costa rican households level of poverty, given test data
# using decision model
households.predictions2 <- predict(households.tree2, households.test, type="class")
str(households.predictions2)
# Comparison table
households.comparison <- households.test
households.comparison$Predictions <- households.predictions2
households.comparison[ , c("Target", "Predictions")]
# Confusion matrix
households.confusion <- table(households.predictions2,households.test$Target)
households.confusion
# Evaluate test kaggle dataset
house.kaggle.test <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/test.csv")
house.kaggle.test <- households.cleaning(house.kaggle.test,FALSE)
households.kaggle.predictions <- predict(households.tree2, households.kaggle.test, type="class")
house.kaggle.predictions <- predict(households.tree2, house.kaggle.test, type="class")
unique(house.kaggle.test$rooms)
unique(households$rooms)
source('~/datascience/kaggle/costa-rican-household-poverty-prediction/costa rican households analysis.R')
# Evaluate test kaggle dataset
house.kaggle.test <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/test.csv")
house.kaggle.test <- households.cleaning(house.kaggle.test,FALSE)
house.kaggle.predictions <- predict(households.tree2, house.kaggle.test, type="class")
house.kaggle.test <- house.kaggle.test[house.kaggle.test$rooms %in% c("12","13","14","15"),]
house.kaggle.predictions <- predict(households.tree2, house.kaggle.test, type="class")
summary(house.kaggle.test$rooms)
summary(households$rooms)
# Evaluate test kaggle dataset
house.kaggle.test <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/test.csv")
summary(house.kaggle.test$rooms)
unique(house.kaggle.test$rooms)
# Evaluate test kaggle dataset
house.kaggle.test <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/test.csv")
house.kaggle.test <- house.kaggle.test[house.kaggle.test$rooms %in% c("12","13","14","15"),]
house.kaggle.predictions <- predict(households.tree2, house.kaggle.test, type="class")
# Evaluate test kaggle dataset
house.kaggle.test <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/test.csv")
house.kaggle.test <- households.cleaning(house.kaggle.test,FALSE)
unique(house.kaggle.test$rooms)
unique(households$rooms)
house.kaggle.test <- house.kaggle.test[house.kaggle.test$rooms %not in% c("12","13","14","15"),]
house.kaggle.test <- house.kaggle.test[house.kaggle.test$rooms !%in% c("12","13","14","15"),]
# Evaluate test kaggle dataset
house.kaggle.test <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/test.csv")
house.kaggle.test <- households.cleaning(house.kaggle.test,FALSE)
house.kaggle.test <- house.kaggle.test[!(house.kaggle.test$rooms %in% c("12","13","14","15")),]
unique(house.kaggle.test$rooms)
unique(households$rooms)
c(1:10)
c("1":"10")
class(c("1":"10"))
# Evaluate test kaggle dataset
house.kaggle.test <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/test.csv")
house.kaggle.test <- households.cleaning(house.kaggle.test,FALSE)
"%w/o%" <- function(x, y) !x %in% y #--  x without y
house.kaggle.test <- house.kaggle.test[!(house.kaggle.test$rooms %w/o% c("12","13","14","15")),]
unique(house.kaggle.test$rooms)
# Evaluate test kaggle dataset
house.kaggle.test <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/test.csv")
house.kaggle.test <- households.cleaning(house.kaggle.test,FALSE)
levels(house.kaggle.test$rooms)
levels(house.kaggle.test$rooms)
levels(households$rooms)
# Evaluate test kaggle dataset
house.kaggle.test <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/test.csv")
house.kaggle.test <- households.cleaning(house.kaggle.test,FALSE)
levels(house.kaggle.test$rooms)
# Add factors to rooms
levels(households$rooms) <- union(levels(households$rooms), c("12","13","14","15"))
levels(households$rooms)
# load the library to create the model
library(rpart)
# Keep only columns listed
keep <- c("hacdor", "rooms", "hacapo","v2a1","v14a","refrig","v18q","v18q1","escolari","hhsize","edjefe","edjefa","parentesco1","Target")
households <- households[,keep]
# Take only households' heads
households <- households[households$parentesco1 == 1,]
dim(households)
# randomly sample 70% of the rows in the dataset to train the model
train.index = sample(1:nrow(households),0.7*nrow(households))
# use row index to create the train dataset
households.train <- households[train.index,]
dim(households.train)
# select the remaining 30% of the rows as test dataset
households.test <- households[-train.index,]
dim(households.test)
tree.params <- rpart.control(minsplit=5,
minbucket=5, maxdepth=30, cp=0.001)
households.tree2 <- rpart(Target ~., data=households.train,
control=tree.params, parms=list(split="gini"))
# Visualize the model
plot(households.tree2)
# Predict costa rican households level of poverty, given test data
# using decision model
households.predictions2 <- predict(households.tree2, households.test, type="class")
str(households.predictions2)
# Comparison table
households.comparison <- households.test
households.comparison$Predictions <- households.predictions2
households.comparison[ , c("Target", "Predictions")]
# Confusion matrix
households.confusion <- table(households.predictions2,households.test$Target)
households.confusion
# Evaluate test kaggle dataset
house.kaggle.test <- read.csv("./datascience/kaggle/costa-rican-household-poverty-prediction/test.csv")
house.kaggle.test <- households.cleaning(house.kaggle.test,FALSE)
house.kaggle.predictions <- predict(households.tree2, house.kaggle.test, type="class")
levels(households$rooms)
levels(house.kaggle.test$rooms)
head(house.kaggle.predictions)
str(house.kaggle.predictions)
class(house.kaggle.predictions)
house.kaggle.test$Predictions <- house.kaggle.predictions
house.kaggle.test$Target <- house.kaggle.predictions
house.kaggle.predictions[,c("Id","Target")]
house.kaggle.test[,c("Id","Target")]
write.csv(house.kaggle.test, "./datascience/kaggle/costa-rican-household-poverty-prediction/" )
write.csv(house.kaggle.test, "./datascience/kaggle/costa-rican-household-poverty-prediction" )
write.csv(house.kaggle.test, "./datascience/kaggle/costa-rican-household-poverty-prediction/predictions.csv" )
typeof(c(1,2,3))
typeof(c("1","2"))
typeof(c(1.0,2.0))
typeof(c(1L,2L))
typeof(c(TRUE,FALSE))
plot(cars)
plot(cars)
head(cars)
head(cars)
head(cars)
knit_with_parameters('~/datascience/nb_test.Rmd')
plot(cars)
head(cars)
plot(cars)
plot(cars)
head(cars)
plot(cars)
head(cars)
head(cars)
x <- c(2,4,6,8)
x ** 2
fit <- lm(dist-speed, data=cars)
fit <- lm(dist~speed, data=cars)
plot(fit)
fit
iris
rowsum(iris)
nrow(iris)
library(tidyr)
library(stringr)
setwd("~/Downloads/datascience/R_codeacademy/projects/project2")
# load libraries
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
# load CSVs
files = list.files(pattern="states.*csv")
df_list = lapply(files,read_csv)
us_census = bind_rows(df_list)
# inspect data
colnames(us_census)
str(us_census)
head(us_census)
# drop X1 column
us_census <- us_census %>% select(-X1)
head(us_census)
# remove % from race columns
us_census <- us_census %>% mutate(Hispanic=gsub("\\%",'',Hispanic), White=gsub("\\%",'',White),Black=gsub("\\%",'',Black),Native=gsub("\\%",'',Native),Asian=gsub("\\%",'',Asian),Pacific=gsub("\\%",'',Pacific))
head(us_census)
# remove $ from Income column
us_census <- us_census %>% mutate(Income=gsub("\\$","",Income))
head(us_census)
# separate GenderPop column
us_census <- us_census %>% separate(GenderPop,c('male_pop','female_pop'),"_")
head(us_census)
# clean male and female population columns
us_census <- us_census %>% mutate(male_pop=str_sub(male_pop,1,-2),female_pop=str_sub(female_pop,1,-2))
head(us_census)
# update column data types
us_census <- us_census %>% mutate(Hispanic=as.numeric(Hispanic),White=as.numeric(White),Black=as.numeric(Black),Native=as.numeric(Native),Asian=as.numeric(Asian),Pacific=as.numeric(Pacific),Income=as.numeric(Income),male_pop=as.numeric(male_pop),female_pop=as.numeric(female_pop))
head(us_census)
# update values of race columns
us_census <- us_census %>% mutate(Hispanic=Hispanic/100,White=White/100,Black=Black/100,Native=Native/100,Asian=Asian/100,Pacific=Pacific/100)
head(us_census)
# check for duplicate rows
us_census %>% duplicated() %>% table()
# remove duplicate rows
us_census <- us_census %>% distinct()
# check for duplicate rows
us_census %>% duplicated() %>% table()
# clean data frame
head(us_census)
